<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Ordering System</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet" />
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f4f7fc;
      color: #333;
      margin: 0;
      padding: 0;
    }
    header {
      background-color: #1e3d58;
      color: white;
      padding: 20px 0;
      text-align: center;
    }
    h1 {
      margin: 0;
      font-size: 2.5rem;
    }
    .container {
      width: 80%;
      margin: 30px auto;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      padding: 20px;
    }
    label {
      font-size: 1.1rem;
      margin-bottom: 5px;
      display: block;
    }
    input, select, button {
      width: 100%;
      padding: 12px;
      margin: 10px 0;
      font-size: 1rem;
      border-radius: 5px;
      border: 1px solid #ddd;
      box-sizing: border-box;
    }
    input[type="number"] {
      width: 48%;
      display: inline-block;
    }
    .input-group {
      display: flex;
      justify-content: space-between;
      gap: 10px;
    }
    button {
      background-color: #1e3d58;
      color: white;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    button:hover {
      background-color: #3c5c7b;
    }
    .error {
      color: red;
      font-size: 0.9rem;
    }
    table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    table th, table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    table th {
      background-color: #1e3d58;
      color: white;
    }
    table td {
      background-color: #f9f9f9;
    }
    table tr:hover td {
      background-color: #f1f1f1;
    }
    #orderListContainer {
      display: none;
    }
    @media (max-width: 768px) {
      .container {
        width: 90%;
      }
      input[type="number"] {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>Ordering System</h1>
  </header>
  <div class="container">
    <div>
      <label for="productName">Product Name:</label>
      <input type="text" id="productName" placeholder="Enter product name" />
      <div class="input-group">
        <div>
          <label for="quantity">Quantity:</label>
          <input type="number" id="quantity" placeholder="Enter quantity" min="1" />
        </div>
        <div>
          <label for="price">Price:</label>
          <input type="number" id="price" placeholder="Enter price" min="0" step="0.01" />
        </div>
      </div>
      <button onclick="addOrder()">Add Order</button>
      <label for="sortBy">Sort Orders By:</label>
      <select id="sortBy">
        <option value="name">Product Name</option>
        <option value="quantity">Quantity</option>
        <option value="price">Price</option>
      </select>
      <button onclick="sortOrders()">Sort Orders</button>
    </div>
    <div class="error" id="errorMessage"></div>
    <button id="showOrderListButton" onclick="toggleOrderList()">Show Order List</button>
    <div id="orderListContainer">
      <h2>Orders List</h2>
      <table id="ordersTable">
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Price</th>
          </tr>
        </thead>
        <tbody>
          <!-- Orders will be listed here -->
        </tbody>
      </table>
    </div>
  </div>

  <script>
    let orders = [];

    function addOrder() {
      const productName = document.getElementById('productName').value.trim();
      const quantity = parseInt(document.getElementById('quantity').value);
      const price = parseFloat(document.getElementById('price').value);

      document.getElementById('errorMessage').textContent = '';

      if (!productName || quantity <= 0 || price <= 0) {
        document.getElementById('errorMessage').textContent =
          'Error: All fields are required and must have valid values.';
        return;
      }

      const order = { productName, quantity, price };
      orders.push(order);

      // Clear inputs
      document.getElementById('productName').value = '';
      document.getElementById('quantity').value = '';
      document.getElementById('price').value = '';

      displayOrders();

      // Send to PHP for MySQL storage
      fetch('save_order.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(order)
      })
      .then(res => res.json())
      .then(data => {
        if (data.status !== 'success') {
          console.error("Failed to save to database:", data.message);
        }
      })
      .catch(err => console.error("Request error:", err));
    }

    function displayOrders() {
      const tableBody = document.querySelector('#ordersTable tbody');
      tableBody.innerHTML = '';
      orders.forEach(order => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${order.productName}</td>
          <td>${order.quantity}</td>
          <td>${order.price.toFixed(2)}</td>
        `;
        tableBody.appendChild(row);
      });
    }

    function sortOrders() {
      const sortBy = document.getElementById('sortBy').value;
      if (sortBy === 'name') {
        orders.sort((a, b) => a.productName.localeCompare(b.productName));
      } else if (sortBy === 'quantity') {
        orders.sort((a, b) => a.quantity - b.quantity);
      } else if (sortBy === 'price') {
        orders.sort((a, b) => a.price - b.price);
      }
      displayOrders();
    }

    function toggleOrderList() {
      const container = document.getElementById('orderListContainer');
      const button = document.getElementById('showOrderListButton');
      if (container.style.display === 'none' || container.style.display === '') {
        container.style.display = 'block';
        button.textContent = 'Hide Order List';
      } else {
        container.style.display = 'none';
        button.textContent = 'Show Order List';
      }
    }
  </script>
</body>
</html>


////////////////////////////////////////////////////////////////////////////

PHP SAVE ORDER
///////////////////////////////////////////////////////////////////////////
<?php
$host = "localhost";
$user = "root";
$password = ""; // Change if needed
$dbname = "ordering_system";

$conn = new mysqli($host, $user, $password, $dbname);
if ($conn->connect_error) {
    die(json_encode(["status" => "error", "message" => $conn->connect_error]));
}

$data = json_decode(file_get_contents("php://input"), true);
$productName = $data["productName"];
$quantity = (int)$data["quantity"];
$price = (float)$data["price"];

if (!$productName || $quantity <= 0 || $price <= 0) {
    echo json_encode(["status" => "error", "message" => "Invalid input"]);
    exit;
}

$stmt = $conn->prepare("INSERT INTO orders (product_name, quantity, price) VALUES (?, ?, ?)");
$stmt->bind_param("sid", $productName, $quantity, $price);

if ($stmt->execute()) {
    echo json_encode(["status" => "success"]);
} else {
    echo json_encode(["status" => "error", "message" => $conn->error]);
}

$stmt->close();
$conn->close();
?>

////////////////////////////////////////////////////////
MySQL
///////////////////////////////////////////////////////
CREATE DATABASE IF NOT EXISTS ordering_system;

USE ordering_system;

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

